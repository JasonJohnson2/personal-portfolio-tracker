function corsHeaders(){return {'content-type':'application/json; charset=utf-8','access-control-allow-origin':'*','access-control-allow-headers':'content-type, authorization','access-control-allow-methods':'GET, POST, OPTIONS'};}
export const onRequestOptions: PagesFunction = async ()=> new Response(null,{headers:corsHeaders()});
export const onRequestGet: PagesFunction = async ({env})=>{const rs=await env.PORTFOLIO_DB.prepare(`SELECT p.*, a.name account_name, a.base_ccy FROM positions p JOIN accounts a ON p.account_id=a.id ORDER BY account_name, symbol`).all();return new Response(JSON.stringify(rs.results??[]),{headers:corsHeaders()});};
export const onRequestPost: PagesFunction = async (ctx)=>{try{const b=await ctx.request.json();const{accountId,symbol,type,qty,avgCost}=b||{};if(!accountId||!symbol||!type||qty==null||avgCost==null)return new Response(JSON.stringify({'error':'Missing fields'}),{status:400,headers:corsHeaders()});await ctx.env.PORTFOLIO_DB.prepare(`INSERT INTO positions (account_id,symbol,type,qty,avg_cost) VALUES (?1,?2,?3,?4,?5) ON CONFLICT(account_id,symbol,type) DO UPDATE SET qty=excluded.qty, avg_cost=excluded.avg_cost`).bind(accountId,String(symbol).toUpperCase(),type,qty,avgCost).run();return new Response(JSON.stringify({'ok':true}),{headers:corsHeaders()})}catch(e){return new Response(JSON.stringify({'error':String(e)}),{status:500,headers:corsHeaders()})}};
