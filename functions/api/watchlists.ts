function corsHeaders(){return {'content-type':'application/json; charset=utf-8','access-control-allow-origin':'*','access-control-allow-headers':'content-type, authorization','access-control-allow-methods':'GET, POST, OPTIONS'};}
export const onRequestOptions: PagesFunction = async ()=> new Response(null,{headers:corsHeaders()});
export const onRequestGet: PagesFunction = async ({env})=>{const rs=await env.PORTFOLIO_DB.prepare(`SELECT w.*, COUNT(ws.symbol) symbols FROM watchlists w LEFT JOIN watchlist_symbols ws ON ws.watchlist_id=w.id GROUP BY w.id ORDER BY w.name`).all();return new Response(JSON.stringify(rs.results??[]),{headers:corsHeaders()});};
export const onRequestPost: PagesFunction = async (ctx)=>{const url=new URL(ctx.request.url);try{if(url.pathname.endsWith('/add-symbol')){const b=await ctx.request.json();const{watchlistId,symbol}=b||{};if(!watchlistId||!symbol)return new Response(JSON.stringify({'error':'Missing watchlistId or symbol'}),{status:400,headers:corsHeaders()});await ctx.env.PORTFOLIO_DB.prepare(`INSERT INTO watchlist_symbols (watchlist_id,symbol) VALUES (?1,?2) ON CONFLICT(watchlist_id,symbol) DO NOTHING`).bind(watchlistId,String(symbol).toUpperCase()).run();return new Response(JSON.stringify({'ok':true}),{headers:corsHeaders()});}else{const b=await ctx.request.json();const{name}=b||{};if(!name)return new Response(JSON.stringify({'error':'Missing name'}),{status:400,headers:corsHeaders()});await ctx.env.PORTFOLIO_DB.prepare(`INSERT INTO watchlists (name) VALUES (?1)`).bind(name).run();return new Response(JSON.stringify({'ok':true}),{headers:corsHeaders()});}}catch(e){return new Response(JSON.stringify({'error':String(e)}),{status:500,headers:corsHeaders()})}};
